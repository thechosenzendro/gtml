# Source file for components used by the compiler.

# innertext property is for inner text of the component.
# id property is for the id generated by the compiler.
# parent property is for the parent component of the component.

components = {
    "header": {
        "attributes": {},
        "component": f"""
        #id_header = Gtk.HeaderBar()
        #id = Gtk.Box()
        #id_header.pack_start(#id)
        self.set_titlebar(#id_header)""",
    },
    "box": {
        "attributes": {
            "orientation": {
                "vertical": f"""
                #id.set_orientation(Gtk.Orientation.VERTICAL)""",
                "horizontal": f"""
                #id.set_orientation(Gtk.Orientation.HORIZONTAL)""",
            },
            "spacing": {
                "#string": f"""
                #id.set_spacing(#string)"""
            },
        },
        "component": f"""
        #id = Gtk.Box()
        #id.set_spacing(5)
        #parent_id.append(#id)""",
    },
    "text": {
        "attributes": {},
        "component": f"""        
        #id = Gtk.Label()
        #id.set_text(#innertext)
        #parent_id.append(#id)""",
    },
    "button": {
        "attributes": {
            "onclick": {
                "#string": f"""
                #id.connect('clicked', #string)
                """
            },
            "icon": {
                "#string": f"""
                #id.set_icon_name("#string")"""
            },
        },
        "component": f"""
        #id_containment_box = Gtk.Box(orientation=Gtk.Orientation.HORIZONTAL)
        #id = Gtk.Button(label=#innertext)
        #id_containment_box.append(#id)
        #parent_id.append(#id_containment_box)""",
    },
    "check": {
        "attributes": {
            "ontoggle": {
                "#string": f"""
                #id.connect('toggled', #string)"""
            }
        },
        "component": f"""
        #id = Gtk.CheckButton(label=#innertext)
        #parent_id.append(#id)""",
    },
    "switch": {
        "attributes": {
            "ontoggle": {
                "#string": f"""
                #id.connect('state-set', #string)"""
            },
            "active": {
                "True": f"""
                #id.set_active(True)""",
                "False": f"""
                #id.set_active(False)""",
            },
        },
        "component": f"""
        #id_containment_box = Gtk.Box(orientation=Gtk.Orientation.HORIZONTAL)
        #id = Gtk.Switch()
        #id_label = Gtk.Label(label=#innertext)
        #id_containment_box.append(#id)
        #id_containment_box.append(#id_label)
        #id_containment_box.set_spacing(5)
        #parent_id.append(#id_containment_box)""",
    },
    "slider": {
        "attributes": {
            "digits": {
                "#string": f"""
                #id.set_digits(#string)"""
            },
            "onchange": {
                "#string": f"""
                #id.connect('value-changed', #string)"""
            },
            "range": {
                "#string": f"""
                #id.set_range(#string)"""
            },
            "showvalue": {
                "True": f"""
                #id.set_draw_value(True)""",
                "False": f"""
                #id.set_draw_value(False)""",
            },
            "value": {
                "#string": f"""
                #id.set_value(#string)"""
            },
        },
        "component": f"""
        #id = Gtk.Scale()
        #parent_id.append(#id)""",
    },
    "menu-button": {
        "attributes": {
            "onclick": {
                "#string": f"""
                #id.connect('clicked', #string)
                """
            },
            "icon": {
                "#string": f"""
                #id.set_icon_name("#string")"""
            },
            "popover": {
                "#string": f"""
                #id.set_popover(self.#string_popover)"""
            },
        },
        "component": f"""
        #id_containment_box = Gtk.Box(orientation=Gtk.Orientation.HORIZONTAL)
        #id = Gtk.MenuButton(label=#innertext)
        #id_containment_box.append(#id)
        #parent_id.append(#id_containment_box)""",
    },
    "popover-menu": {
        "attributes": {},
        "component": f"""
        #id = Gio.Menu.new()
        #id_popover = Gtk.PopoverMenu()
        #id_popover.set_menu_model(#id)""",
    },
    "menu-action": {
        "attributes": {
            "onactivate": {
                "#string": f"""
                #id.connect("activate", #string)"""
            },
            "clickable": {
                "True": f"""
                #id.set_enabled(True)""",
                "False": f"""
                #id.set_enabled(False)""",
            },
        },
        "component": f"""
        #id_name = #innertext.replace(" ", "_").lower()
        #id = Gio.SimpleAction.new(#id_name, None)
        #id.set_enabled(True)
        self.add_action(#id)
        #parent_id.append(#innertext, #id_name)""",
    },
}

global_attributes = {
    "class": {"#string": f"""#id.set_css_classes('#string'.split(" "))"""}
}
